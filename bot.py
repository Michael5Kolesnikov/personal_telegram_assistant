import telebot
from telebot import types
from flask import Flask, request

import os
import random

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
from config import TOKEN, secret, url

bot = telebot.TeleBot(TOKEN, threaded=False)
bot.remove_webhook()
bot.set_webhook(url=url)
app = Flask(__name__)


@app.route('/' + secret, methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
    bot.process_new_updates([update])
    return 'ok', 2000


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
main_buttons = [types.KeyboardButton(button) for button in ('–°–æ–±—ã—Ç–∏—è', '–ó–∞–º–µ—Ç–∫–∏', 'üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ', 'üòä –ö–∞–∫ –¥–µ–ª–∞?', '–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏')]


@bot.message_handler(commands=['start'])  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è '/start' –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ. –ü—è–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
def welcome(message: types.Message):
    id_ = message.from_user.id
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –Ω–∞–ø–∏—Å–∞–ª –∫–æ–º–∞–Ω–¥—É '/start', —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ id –≤ —Å–ø–∏—Å–æ–∫_id (—ç—Ç–æ Data_clients) –Ω–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if f'{id_}' not in os.listdir('Data_clients'):
        os.mkdir(f'Data_clients//{id_}')
        os.mkdir(f'Data_clients//{id_}//–°–æ–±—ã—Ç–∏—è')
        os.mkdir(f'Data_clients//{id_}//–ó–∞–º–µ—Ç–∫–∏')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*main_buttons)
    bot.send_message(message.chat.id,
                     f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {message.from_user.first_name}!\n–Ø - {bot.get_me().first_name}, –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –±—ã—Ç—å —Ç–µ–±–µ –ø–æ–ª–µ–∑–Ω—ã–º.',
                     parse_mode='html', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def answer(message: types.Message):
    if message.chat.type == 'private':
        if message.text == '–°–æ–±—ã—Ç–∏—è' or message.text == '–ó–∞–º–µ—Ç–∫–∏':
            markup = types.InlineKeyboardMarkup(row_width=3)
            create = types.InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å', callback_data=f'create_{message.text}')
            look = types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å', callback_data=f'look_{message.text}')
            delete = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_{message.text}')
            markup.add(create, look, delete)
            bot.send_message(message.chat.id, '–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=markup)

        elif message.text == 'üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
            bot.send_message(message.chat.id, str(random.randint(0, 1000)))

        elif message.text == 'üòä –ö–∞–∫ –¥–µ–ª–∞?':
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data='good')
            item2 = types.InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å", callback_data='bad')
            markup.add(item1, item2)
            bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —Å–∞–º –∫–∞–∫?', reply_markup=markup)

        elif message.text == '–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏':
            bot.send_message(message.chat.id,
                             '1. –°–æ–∑–¥–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ‚Äì –¥–∞—Ç–∞, –≤—Ä–µ–º—è, –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–±—ã—Ç–∏—è, –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è \n'
                             '2. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–µ ‚Äì –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\n'
                             '3. –í—ã–∑–æ–≤ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π (–¥–∞—Ç–∞, –≤—Ä–µ–º—è, –∑–∞–≥–æ–ª–æ–≤–∫–∏)\n'
                             '4. –°–æ–∑–¥–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫\n'
                             '5. –í—ã–∑–æ–≤ —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫ (–∑–∞–≥–æ–ª–æ–≤–∫–∏)\n'
                             '6. –í—ã–∑–æ–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏\n'
                             '7. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1000')

        else:
            bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢')


path = ''  # –¥–ª—è –ø—É—Ç–µ–π —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
kind = ''  # –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∏ –∑–∞–º–µ—Ç–æ–∫ –º–µ–∂–¥—É —Å–æ–±–æ–π


def write_down(path_, text):
    f = open(path_, 'a')
    f.write(text + '\n')
    f.close()


def name(message: types.Message):  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π —Å–æ–±—ã—Ç–∏–π –∏ –∑–∞–º–µ—Ç–æ–∫
    global path, kind
    id_ = message.from_user.id

    # –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –∑–∞–º–µ—Ç–∫–∏ —Å —Ç–∞–∫–∏–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –µ—â–µ –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    if message.text not in os.listdir(f'Data_clients//{id_}//{kind}'):
        path = f'Data_clients//{id_}//{kind}//{message.text}.txt'
        f = open(path, 'w')
        f.write(message.text + '\n')
        f.close()
        if kind == '–°–æ–±—ã—Ç–∏—è':
            msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è:')
            bot.register_next_step_handler(msg, date)
        else:
            msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:')
            bot.register_next_step_handler(msg, description)
    else:
        bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ. –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ç–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!')


def date(message: types.Message):
    global path
    write_down(path, message.text)
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:')
    bot.register_next_step_handler(msg, time)


def time(message: types.Message):
    global path
    write_down(path, message.text)
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:')
    bot.register_next_step_handler(msg, description)


def description(message: types.Message):  # –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –∑–∞–º–µ—Ç–∫–∏
    global path
    write_down(path, message.text)
    if kind == '–°–æ–±—ã—Ç–∏—è':
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ç–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–æ–¥.–º–µ—Å—è—Ü.–¥–µ–Ω—å.—á–∞—Å.–º–∏–Ω—É—Ç–∞\n'
                                                '–ü—Ä–∏–º–µ—Ä - 2021.01.01.09.30\n'
                                                '–ï—Å–ª–∏ –≤–∞–º –Ω–µ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥ –Ω–∞–ø–∏—Å–∞–≤ —Ü–∏—Ñ—Ä—É 0')
        bot.register_next_step_handler(msg, time_of_remaining)
    else:
        bot.send_message(message.chat.id, '–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!')


def time_of_remaining(message: types.Message):
    global path
    text = message.text
    time_remain = text[0:4] + text[5:7] + text[8:10] + text[11:13] + text[14:]
    if time_remain.isdigit() and len(text) == 16:
        write_down(path, message.text)
        bot.send_message(message.chat.id, '–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!')
        f = open(f'Remain//{time_remain}.txt', 'w')
        f.close()
        f = open(path)
        write_down(f'Remain//{time_remain}.txt', f'{message.chat.id}\n' + f.read())
        f.close()
    elif text == '0':
        bot.send_message(message.chat.id, '–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!')
    else:
        msg = bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ! –í—ã –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!  –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ–≥–æ –µ—â–µ —Ä–∞–∑')
        bot.register_next_step_handler(msg, time_of_remaining)


@bot.callback_query_handler(func=lambda call: True)  # —Ä–∞–±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
def callback_inline(call):
    global path, kind
    try:
        if call.message:
            id_ = call.message.chat.id
            
            # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –∑–∞–º–µ—Ç–∫–∞–º–∏
            if 'create' == call.data[0:6]:
                msg = bot.send_message(id_, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:')
                kind = call.data[7:]
                bot.register_next_step_handler(msg, name)
            elif 'look' == call.data[0:4]:
                if call.data[5:] == '–°–æ–±—ã—Ç–∏—è':
                    kind = '–°–æ–±—ã—Ç–∏—è'
                else:
                    kind = '–ó–∞–º–µ—Ç–∫–∏'
                path = f'Data_clients//{id_}//{kind}'
                list_ = os.listdir(path)
                if list_:
                    markup = types.InlineKeyboardMarkup(row_width=3)
                    markup.add(*[types.InlineKeyboardButton(button[:-4], callback_data=str(list_.index(button))) for button in list_])
                    bot.send_message(id_, '–°–ø–∏—Å–æ–∫:', reply_markup=markup)
                else:
                    bot.send_message(id_, '–¢—É—Ç –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç')
            elif 'delete' == call.data[0:6]:
                path = f'Data_clients//{id_}//{call.data[7:]}'  # —Å –ø–æ–º–æ—â—å—é call.data –≤—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é –ø–∞–ø–∫—É(–ª–∏–±–æ –°–æ–±—ã—Ç–∏—è, –ª–∏–±–æ –ó–∞–º–µ—Ç–∫–∏)
                list_ = os.listdir(path)
                if list_:
                    markup = types.InlineKeyboardMarkup(row_width=3)
                    markup.add(*[types.InlineKeyboardButton(button[:-4], callback_data=str(list_.index(button)) + 'd') for button in list_])
                    # –¥–æ–±–∞–≤–ª—è–µ–º –∫ callback_data –±—É–∫–≤—É d, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å, –∞ –Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å
                    bot.send_message(id_, '–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?', reply_markup=markup)
                else:
                    bot.send_message(id_, '–¢—É—Ç –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç')

            # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ "–ö–∞–∫ –¥–µ–ª–∞?"
            elif call.data == 'good':
                bot.send_message(id_, '–í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–µ–Ω—å–∫–æ üòä')
            elif call.data == 'bad':
                bot.send_message(id_, '–ë—ã–≤–∞–µ—Ç üò¢')

            # –≤—ã–∑–æ–≤ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –∑–∞–º–µ—Ç–∫–∏
            elif call.data[0].isdigit():
                list_ = os.listdir(path)
                if call.data[-1].isdigit():  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±—É–∫–≤—ã d
                    path = f'{path}//{list_[int(call.data)]}'
                    f = open(path)
                    bot.send_message(id_, f.read())
                    f.close()
                else:
                    os.remove(f'{path}//{list_[int(call.data[:-1])]}')
                    bot.send_message(id_, '–£–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')

            bot.edit_message_text(chat_id=id_, message_id=call.message.message_id, text=call.message.text, reply_markup=None)  # —É–¥–∞–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏

    except Exception as e:
        print(repr(e))
