import telebot
import config
from telebot import types
import random

bot = telebot.TeleBot(config.TOKEN)
events = []  # —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
event = {}  # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤–Ω–æ—Å–∏–º—ã—Ö —Å–æ–±—ã—Ç–∏–π
notes = []  # –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
notes_name = []  # –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


@bot.message_handler(commands=['start'])  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è '/start' –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ. –ü—è–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
def welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    main_buttons = [types.KeyboardButton(button) for button in ('–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ', '–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π',
                                                                '–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞', '–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫', '–í—ã–∑–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É',
                                                                'üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ', 'üòä –ö–∞–∫ –¥–µ–ª–∞?',
                                                                '–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏')]
    markup.add(*main_buttons)
    bot.send_message(message.chat.id,
                     f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {message.from_user.first_name}!\n–Ø - {bot.get_me().first_name}, –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –±—ã—Ç—å —Ç–µ–±–µ –ø–æ–ª–µ–∑–Ω—ã–º.',
                     parse_mode='html', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def answer(message):
    global events
    if message.chat.type == 'private':
        if message.text == '–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ':
            msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–¥–µ–Ω—å:–º–µ—Å—è—Ü:–≥–æ–¥')
            bot.register_next_step_handler(msg, date)

        elif message.text == '–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π':
            bot.reply_to(message, '–í–∞—à —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π:')
            all_items = ''
            for event_ in events:
                for item in event_:
                    all_items += f'{item} : {event_[item]}' + '\n'
                bot.send_message(message.chat.id, all_items)
                all_items = ''

        elif message.text == '–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞':
            msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:')
            bot.register_next_step_handler(msg, name_note)

        elif message.text == '–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫':
            bot.send_message(message.chat.id, '\n'.join(notes_name))

        elif message.text == '–í—ã–∑–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É':
            markup = types.InlineKeyboardMarkup(row_width=2)
            notes_buttons = [types.InlineKeyboardButton(button, callback_data=str(notes_name.index(button))) for button in notes_name]
            markup.add(*notes_buttons)
            bot.send_message(message.chat.id, '–ö–∞–∫—É—é –∑–∞–º–µ—Ç–∫—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å?', reply_markup=markup)

        elif message.text == 'üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
            bot.send_message(message.chat.id, str(random.randint(0, 100)))

        elif message.text == 'üòä –ö–∞–∫ –¥–µ–ª–∞?':
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data='good')
            item2 = types.InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å", callback_data='bad')
            markup.add(item1, item2)
            bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —Å–∞–º –∫–∞–∫?', reply_markup=markup)

        elif message.text == '–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏':
            bot.send_message(message.chat.id, '1. –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ‚Äì –¥–∞—Ç–∞, –≤—Ä–µ–º—è, –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–±—ã—Ç–∏—è, –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è \n'
                                              '2. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–µ ‚Äì –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\n'
                                              '3. –í—ã–∑–æ–≤ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π (–¥–∞—Ç–∞, –≤—Ä–µ–º—è, –∑–∞–≥–æ–ª–æ–≤–∫–∏)\n'
                                              '4. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫\n'
                                              '5. –í—ã–∑–æ–≤ —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫ (–∑–∞–≥–æ–ª–æ–≤–∫–∏)\n'
                                              '6. –í—ã–∑–æ–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏\n'
                                              '7. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100')

        else:
            bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢')


# —Ä–∞–±–æ—Ç–∞ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
def name_note(message):
    global notes_name
    if message.text not in notes_name:
        notes_name.append(message.text)
    else:
        bot.send_message(message.chat.id, '–£–∂–µ –µ—Å—Ç—å –∑–∞–º–µ—Ç–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º!')
        return
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:')
    bot.register_next_step_handler(msg, text_note)


def text_note(message):
    global notes
    notes.append(message.text)


# —Ä–∞–±–æ—Ç–∞ —Å —Å–æ–±—ã—Ç–∏—è–º–∏
def date(message):
    global event
    event = {'–î–∞—Ç–∞': message.text}
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n—á–∞—Å:–º–∏–Ω—É—Ç—ã')
    bot.register_next_step_handler(msg, time)


def time(message):
    global event
    event.update({'–í—Ä–µ–º—è': message.text})
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:')
    bot.register_next_step_handler(msg, name)


def name(message):
    global event
    event.update({'–ù–∞–∑–≤–∞–Ω–∏–µ': message.text})
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: (–ø–æ –∂–µ–ª–∞–Ω–∏—é)')
    bot.register_next_step_handler(msg, description)


def description(message):
    global event
    if description:
        event.update({'–û–ø–∏—Å–∞–Ω–∏–µ': message.text})
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∞—Å:–º–∏–Ω—É—Ç–∞:–¥–µ–Ω—å:–º–µ—Å—è—Ü:–≥–æ–¥')
    bot.register_next_step_handler(msg, time_of_remaining)


def time_of_remaining(message):
    global event
    event.update({'–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è': message.text})
    events.append(event)


@bot.callback_query_handler(func=lambda call: True)  # —Ä–∞–±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'good':
                bot.send_message(call.message.chat.id, '–í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–µ–Ω—å–∫–æ üòä')
            elif call.data == 'bad':
                bot.send_message(call.message.chat.id, '–ë—ã–≤–∞–µ—Ç üò¢')
            elif call.data.isdigit():  # –≤—ã–∑–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏
                bot.send_message(call.message.chat.id, notes[int(call.data)])
    except Exception as e:
        print(repr(e))


bot.polling(none_stop=True)  # –∑–∞–ø—É—Å–∫
